{"version":3,"sources":["styling/constants.ts","components/Column.tsx","components/Disc.tsx","components/Slot.tsx","helpers/wait.ts","config.ts","models/SlotModel.ts","models/ColumnModel.ts","stores/gameStore.ts","helpers/sample.ts","containers/Board.tsx","helpers/randomBetween.ts","containers/GameInfo.tsx","containers/App.tsx","index.tsx"],"names":["colors","background","board","disc","ai","player","breakpoints","Column","props","x","onClick","isReady","className","classNames","react_default","a","createElement","Container","styled","button","withConfig","displayName","componentId","rgba","Disc","y","team","style","useSpring","to","transform","from","concat","config","Object","objectSpread","gentle","clamp","teamAi","teamPlayer","Disc_Container","animated","div","Slot","Slot_Container","wait","milliseconds","Promise","resolve","setTimeout","rowLength","columnLength","SlotModel","_class","classCallCheck","this","initializerDefineProperty","_descriptor","createClass","key","value","filledBy","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","ColumnModel","ColumnModel_class","_this","slots","range","map","emptySlot","last","emptySlots","fill","success","get","filter","slot","every","computed","checkLine","_len","arguments","length","Array","_key","firstSlot","wonState","gameStore","GameStore","columns","flatMap","column","gameStore_descriptor","_descriptor2","disposeWinListener","startGame","autorun","winner","state","undefined","result","checkWinner","randomColumn","array","Math","floor","random","isFull","filledSlots","generateDiscKey","generateSlotKey","generateColumnKey","confettiConfig","particleCount","angle","min","max","spread","origin","Board","useEffect","when","asyncToGenerator","regenerator_default","mark","_callee","i","wrap","_context","prev","next","createConfetti","stop","useObserver","discs","Disc_Disc","Slot_Slot","Column_Column","fillColumn","Board_Container","main","stateTexts","ready","ai playing","ai won","player won","GameInfo","stateText","GameInfo_Container","footer","GlobalStyle","createGlobalStyle","_templateObject","ReactDOM","render","Fragment","App_Container","Board_Board","GameInfo_GameInfo","document","getElementById"],"mappings":"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","file":"static/js/main.c2bffcfd.chunk.js","sourcesContent":["export const colors = {\r\n  background: \"#212c2d\",\r\n  board: \"#334446\",\r\n  disc: \"#141d1f\",\r\n  ai: \"#c91a55\",\r\n  player: \"#268fc0\"\r\n}\r\n\r\nexport const breakpoints = {\r\n  mobile: \"(max-width: 600px)\",\r\n  desktop: \"(min-width: 601px)\"\r\n}\r\n","import classNames from \"classnames\"\r\nimport { rgba } from \"polished\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\ninterface ColumnProps {\r\n  x: number\r\n  onClick: () => void\r\n  isReady: boolean\r\n}\r\n\r\nexport const Column = (props: ColumnProps) => {\r\n  const { x, onClick, isReady } = props\r\n\r\n  const className = classNames({ isReady })\r\n\r\n  return <Container className={className} x={x} onClick={onClick} />\r\n}\r\n\r\nconst Container = styled.button<Pick<ColumnProps, \"x\">>`\r\n  grid-column: ${props => props.x + 1};\r\n  grid-row: 1/-1;\r\n  border: none;\r\n  border-radius: 50px;\r\n  background-color: transparent;\r\n  outline: none;\r\n  cursor: pointer;\r\n  z-index: 2;\r\n\r\n  transition: background-color 0.1s ease;\r\n\r\n  &.isReady:hover,\r\n  &.focus-visible {\r\n    background-color: ${rgba(\"white\", 0.05)};\r\n  }\r\n`\r\n","import classNames from \"classnames\"\r\nimport React from \"react\"\r\nimport { animated, config, useSpring } from \"react-spring\"\r\nimport styled from \"styled-components\"\r\nimport { colors } from \"../styling/constants\"\r\nimport { Team } from \"../types\"\r\n\r\ninterface DiscProps {\r\n  x: number\r\n  y: number\r\n  team: Team\r\n}\r\n\r\nexport const Disc = (props: DiscProps) => {\r\n  const { x, y, team } = props\r\n\r\n  const style = useSpring({\r\n    to: { transform: \"translateY(0)\" },\r\n    from: { transform: `translateY(-${(y + 1) * 100}%)` },\r\n    config: {\r\n      ...config.gentle,\r\n      clamp: true\r\n    }\r\n  })\r\n\r\n  const className = classNames({\r\n    teamAi: team === \"ai\",\r\n    teamPlayer: team === \"player\"\r\n  })\r\n\r\n  return <Container x={x} y={y} className={className} style={style} />\r\n}\r\n\r\nconst Container = styled(animated.div)<Pick<DiscProps, \"x\" | \"y\">>`\r\n  grid-column: ${props => props.x + 1};\r\n  grid-row: ${props => props.y + 1};\r\n  width: 9vw;\r\n  height: 9vw;\r\n  min-width: 35px;\r\n  min-height: 35px;\r\n  max-width: 70px;\r\n  max-height: 70px;\r\n  border-radius: 50px;\r\n\r\n  background: radial-gradient(\r\n    circle,\r\n    ${colors.disc},\r\n    ${colors.disc} 40%,\r\n    var(--border-color) calc(40% + 1px),\r\n    var(--border-color) 48%,\r\n    ${colors.disc} calc(48% + 1px)\r\n  );\r\n\r\n  &.teamAi {\r\n    --border-color: ${colors.ai};\r\n  }\r\n\r\n  &.teamPlayer {\r\n    --border-color: ${colors.player};\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { colors } from \"../styling/constants\"\r\n\r\ninterface SlotProps {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport const Slot = (props: SlotProps) => {\r\n  const { x, y } = props\r\n\r\n  return <Container x={x} y={y} />\r\n}\r\n\r\nconst Container = styled.div<Pick<SlotProps, \"x\" | \"y\">>`\r\n  grid-column: ${props => props.x + 1};\r\n  grid-row: ${props => props.y + 1};\r\n  width: 9vw;\r\n  height: 9vw;\r\n  min-width: 35px;\r\n  min-height: 35px;\r\n  max-width: 70px;\r\n  max-height: 70px;\r\n  background: radial-gradient(\r\n    circle,\r\n    transparent,\r\n    transparent calc(69% - var(--board-padding)),\r\n    ${colors.board} calc(69% - var(--board-padding) + 1px)\r\n  );\r\n  z-index: 1;\r\n`\r\n","export const wait = (milliseconds: number) =>\r\n  new Promise(resolve => setTimeout(resolve, milliseconds))\r\n","export const rowLength = 7\r\nexport const columnLength = 6\r\n","import { action, observable } from \"mobx\"\r\nimport { Team } from \"../types\"\r\n\r\nexport class SlotModel {\r\n  @observable\r\n  public filledBy: Team | \"none\" = \"none\"\r\n\r\n  constructor(public readonly x: number, public readonly y: number) {}\r\n\r\n  @action\r\n  public fill(team: Team) {\r\n    this.filledBy = team\r\n  }\r\n}\r\n","import { action, computed } from \"mobx\"\r\nimport { last, range } from \"ramda\"\r\nimport { columnLength } from \"../config\"\r\nimport { Team } from \"../types\"\r\nimport { SlotModel } from \"./SlotModel\"\r\n\r\nexport class ColumnModel {\r\n  constructor(public readonly x: number) {}\r\n  public readonly slots = range(0, columnLength).map(y => new SlotModel(this.x, y))\r\n\r\n  @computed\r\n  public get emptySlots() {\r\n    return this.slots.filter(slot => slot.filledBy === \"none\") as Array<\r\n      SlotModel & { filledBy: \"none\" }\r\n    >\r\n  }\r\n\r\n  @computed\r\n  public get filledSlots() {\r\n    return this.slots.filter(slot => slot.filledBy !== \"none\") as Array<\r\n      SlotModel & { filledBy: Team }\r\n    >\r\n  }\r\n\r\n  @computed\r\n  public get isFull() {\r\n    return this.slots.every(slot => slot.filledBy !== \"none\")\r\n  }\r\n\r\n  @action\r\n  public fill(team: Team) {\r\n    const emptySlot = last(this.emptySlots)\r\n    if (!emptySlot) return { success: false }\r\n\r\n    emptySlot.fill(team)\r\n    return { success: true }\r\n  }\r\n}\r\n","import { action, autorun, computed, IReactionDisposer, observable } from \"mobx\"\r\nimport { range } from \"ramda\"\r\nimport { columnLength, rowLength } from \"../config\"\r\nimport { sample } from \"../helpers/sample\"\r\nimport { wait } from \"../helpers/wait\"\r\nimport { ColumnModel } from \"../models/ColumnModel\"\r\nimport { SlotModel } from \"../models/SlotModel\"\r\nimport { GameState, Team } from \"../types\"\r\n\r\nconst checkLine = (...slots: [SlotModel, SlotModel, SlotModel, SlotModel]) => {\r\n  const firstSlot = slots[0]\r\n  if (firstSlot.filledBy === \"none\") return\r\n\r\n  if (slots.every(slot => slot.filledBy === firstSlot.filledBy))\r\n    return firstSlot.filledBy\r\n}\r\n\r\nconst wonState = {\r\n  ai: \"ai won\" as const,\r\n  player: \"player won\" as const\r\n}\r\n\r\nclass GameStore {\r\n  public readonly columns = range(0, rowLength).map(x => new ColumnModel(x))\r\n  public readonly slots = this.columns.flatMap(column => column.slots)\r\n\r\n  @observable\r\n  public state: GameState = \"ready\"\r\n\r\n  @observable\r\n  public winner?: Team\r\n\r\n  constructor() {\r\n    this.startGame()\r\n  }\r\n\r\n  private disposeWinListener?: IReactionDisposer\r\n\r\n  public startGame() {\r\n    if (this.disposeWinListener) this.disposeWinListener()\r\n\r\n    this.disposeWinListener = autorun(() => {\r\n      const { winner } = this\r\n\r\n      if (winner) {\r\n        this.winner = winner\r\n        this.state = wonState[winner]\r\n        if (this.disposeWinListener) this.disposeWinListener()\r\n      }\r\n    })\r\n  }\r\n\r\n  @computed\r\n  public get filledSlots() {\r\n    return this.columns.flatMap(column => column.filledSlots)\r\n  }\r\n\r\n  private checkWinner() {\r\n    const { columns } = this\r\n    const slot = (x: number, y: number) => columns[x].slots[y]\r\n\r\n    let winner: Team | undefined = undefined\r\n\r\n    // down\r\n    for (let x = 0; x < rowLength; x++) {\r\n      for (let y = 0; y < columnLength - 3; y++) {\r\n        const result = checkLine(\r\n          slot(x, y),\r\n          slot(x, y + 1),\r\n          slot(x, y + 2),\r\n          slot(x, y + 3)\r\n        )\r\n\r\n        if (result) winner = result\r\n      }\r\n    }\r\n\r\n    // right\r\n    for (let x = 0; x < rowLength - 3; x++) {\r\n      for (let y = 0; y < columnLength; y++) {\r\n        const result = checkLine(\r\n          slot(x, y),\r\n          slot(x + 1, y),\r\n          slot(x + 2, y),\r\n          slot(x + 3, y)\r\n        )\r\n\r\n        if (result) winner = result\r\n      }\r\n    }\r\n\r\n    // down-right\r\n    for (let x = 0; x < rowLength - 3; x++) {\r\n      for (let y = 0; y < columnLength - 3; y++) {\r\n        const result = checkLine(\r\n          slot(x, y),\r\n          slot(x + 1, y + 1),\r\n          slot(x + 2, y + 2),\r\n          slot(x + 3, y + 3)\r\n        )\r\n\r\n        if (result) winner = result\r\n      }\r\n    }\r\n\r\n    // down-left\r\n    for (let x = 0; x < rowLength - 3; x++) {\r\n      for (let y = 3; y < columnLength; y++) {\r\n        const result = checkLine(\r\n          slot(x, y),\r\n          slot(x + 1, y - 1),\r\n          slot(x + 2, y - 2),\r\n          slot(x + 3, y - 3)\r\n        )\r\n\r\n        if (result) winner = result\r\n      }\r\n    }\r\n\r\n    if (winner) this.winner = winner\r\n    return winner\r\n  }\r\n\r\n  @action\r\n  public async fillColumn(column: ColumnModel) {\r\n    if (this.state !== \"ready\") return\r\n\r\n    const { success } = column.fill(\"player\")\r\n    if (!success) return\r\n    let winner = this.checkWinner()\r\n    if (winner) return\r\n\r\n    this.state = \"ai playing\"\r\n    await wait(1000)\r\n\r\n    let randomColumn: ColumnModel | undefined = undefined\r\n    do {\r\n      randomColumn = sample(this.columns)\r\n    } while (randomColumn.isFull)\r\n\r\n    randomColumn.fill(\"ai\")\r\n\r\n    winner = this.checkWinner()\r\n    if (winner) return\r\n    this.state = \"ready\"\r\n  }\r\n}\r\n\r\nexport const gameStore = new GameStore()\r\n","export const sample = <T>(array: T[]) => array[Math.floor(Math.random() * array.length)]\r\n","import createConfetti from \"canvas-confetti\"\r\nimport { when } from \"mobx\"\r\nimport { useObserver } from \"mobx-react-lite\"\r\nimport React, { useEffect } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { Column } from \"../components/Column\"\r\nimport { Disc } from \"../components/Disc\"\r\nimport { Slot } from \"../components/Slot\"\r\nimport { randomBetween } from \"../helpers/randomBetween\"\r\nimport { wait } from \"../helpers/wait\"\r\nimport { ColumnModel } from \"../models/ColumnModel\"\r\nimport { SlotModel } from \"../models/SlotModel\"\r\nimport { gameStore } from \"../stores/gameStore\"\r\nimport { breakpoints, colors } from \"../styling/constants\"\r\nimport { Team } from \"../types\"\r\n\r\nconst generateDiscKey = (slot: SlotModel) => `disc-${slot.x}-${slot.y}`\r\nconst generateSlotKey = (slot: SlotModel) => `slot-${slot.x}-${slot.y}`\r\nconst generateColumnKey = (column: ColumnModel) => `column-${column.x}`\r\n\r\nconst confettiConfig = (winner: Team) => ({\r\n  particleCount: 200,\r\n  angle: randomBetween(55, 125),\r\n  spread: 100,\r\n  origin: {\r\n    y: 0.6\r\n  },\r\n  colors: [colors[winner!], colors.disc]\r\n})\r\n\r\nconst useVictoryConfetti = () => {\r\n  useEffect(() => {\r\n    const disposer = when(\r\n      () => gameStore.winner !== undefined,\r\n      async () => {\r\n        const { winner } = gameStore\r\n\r\n        for (var i = 0; i < 3; i++) {\r\n          createConfetti(confettiConfig(winner!))\r\n          await wait(500)\r\n        }\r\n      }\r\n    )\r\n\r\n    return disposer\r\n  }, [])\r\n}\r\n\r\nexport const Board = () => {\r\n  useVictoryConfetti()\r\n\r\n  const isReady = useObserver(() => gameStore.state === \"ready\")\r\n\r\n  const discs = useObserver(() =>\r\n    gameStore.filledSlots.map(slot => (\r\n      <Disc\r\n        key={generateDiscKey(slot)}\r\n        x={slot.x}\r\n        y={slot.y}\r\n        team={slot.filledBy}\r\n      />\r\n    ))\r\n  )\r\n\r\n  const slots = gameStore.slots.map(slot => (\r\n    <Slot key={generateSlotKey(slot)} x={slot.x} y={slot.y} />\r\n  ))\r\n\r\n  const columns = gameStore.columns.map(column => (\r\n    <Column\r\n      key={generateColumnKey(column)}\r\n      x={column.x}\r\n      onClick={() => gameStore.fillColumn(column)}\r\n      isReady={isReady}\r\n    />\r\n  ))\r\n\r\n  return (\r\n    <Container>\r\n      {discs}\r\n      {slots}\r\n      {columns}\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.main`\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  grid-template-rows: repeat(6, 1fr);\r\n\r\n  padding: var(--board-padding);\r\n  background-image: linear-gradient(\r\n      to bottom,\r\n      ${colors.background} 0%,\r\n      ${colors.background} 100%\r\n    ),\r\n    linear-gradient(to bottom, ${colors.board} 0%, ${colors.board} 100%);\r\n  background-clip: content-box, padding-box;\r\n\r\n  border-radius: 4px;\r\n\r\n  @media ${breakpoints.mobile} {\r\n    --board-padding: 2px;\r\n  }\r\n\r\n  @media ${breakpoints.desktop} {\r\n    --board-padding: 5px;\r\n  }\r\n`\r\n","export const randomBetween = (min: number, max: number) =>\r\n  Math.random() * (max - min) + min\r\n","import { useObserver } from \"mobx-react-lite\"\r\nimport { rgba } from \"polished\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { gameStore } from \"../stores/gameStore\"\r\nimport { GameState } from \"../types\"\r\n\r\nconst stateTexts: Record<GameState, string> = {\r\n  ready: \"Your turn!\",\r\n  \"ai playing\": \"AI is playing...\",\r\n  \"ai won\": \"The AI won!\",\r\n  \"player won\": \"You won!\"\r\n}\r\n\r\nexport const GameInfo = () => {\r\n  const state = useObserver(() => gameStore.state)\r\n  const stateText = stateTexts[state]\r\n\r\n  return <Container>{stateText}</Container>\r\n}\r\n\r\nconst Container = styled.footer`\r\n  color: ${rgba(\"white\", 0.7)};\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n  text-align: center;\r\n  margin-top: 10px;\r\n`\r\n","import React from \"react\"\r\nimport styled, { createGlobalStyle } from \"styled-components\"\r\nimport { colors } from \"../styling/constants\"\r\nimport { Board } from \"./Board\"\r\nimport { GameInfo } from \"./GameInfo\"\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Container>\r\n        <Board />\r\n        <GameInfo />\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background-color: ${colors.background};\r\n`\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    font-family: \"Montserrat\", sans-serif;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { App } from \"./containers/App\"\r\nimport \"./polyfills\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n"],"sourceRoot":""}