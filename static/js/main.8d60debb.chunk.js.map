{"version":3,"sources":["styling/constants.ts","components/Column.tsx","components/Disc.tsx","components/Slot.tsx","config.ts","helpers/wait.ts","models/SlotModel.ts","models/ColumnModel.ts","stores/gameStore.ts","helpers/sample.ts","containers/Board.tsx","containers/GameInfo.tsx","containers/App.tsx","index.tsx"],"names":["colors","breakpoints","Column","props","x","onClick","react_default","a","createElement","Container","styled","button","withConfig","displayName","componentId","rgba","Disc","y","team","style","useSpring","to","transform","from","concat","config","Object","objectSpread","gentle","clamp","className","classNames","teamAi","teamPlayer","Disc_Container","animated","div","Slot","Slot_Container","rowLength","columnLength","wait","milliseconds","Promise","resolve","setTimeout","SlotModel","_class","classCallCheck","this","initializerDefineProperty","_descriptor","createClass","key","value","filledBy","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","ColumnModel","ColumnModel_class","_this","slots","range","map","emptySlot","last","emptySlots","fill","success","get","filter","slot","every","computed","gameStore","columns","flatMap","column","state","randomColumn","undefined","array","Math","floor","random","length","isFull","filledSlots","generateDiscKey","generateSlotKey","generateColumnKey","Board","discs","useObserver","Disc_Disc","Slot_Slot","Column_Column","fillColumn","Board_Container","main","stateTexts","ready","ai playing","ai won","player won","GameInfo","stateText","GameInfo_Container","footer","GlobalStyle","createGlobalStyle","_templateObject","ReactDOM","render","Fragment","App_Container","Board_Board","GameInfo_GameInfo","document","getElementById"],"mappings":"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","file":"static/js/main.8d60debb.chunk.js","sourcesContent":["export const colors = {\r\n  background: \"#212c2d\",\r\n  board: \"#334446\"\r\n}\r\n\r\nexport const breakpoints = {\r\n  mobile: \"(max-width: 600px)\",\r\n  desktop: \"(min-width: 601px)\"\r\n}\r\n","import { rgba } from \"polished\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\ninterface ColumnProps {\r\n  x: number\r\n  onClick: () => void\r\n}\r\n\r\nexport const Column = (props: ColumnProps) => {\r\n  const { x, onClick } = props\r\n\r\n  return <Container x={x} onClick={onClick} />\r\n}\r\n\r\nconst Container = styled.button<Pick<ColumnProps, \"x\">>`\r\n  grid-column: ${props => props.x + 1};\r\n  grid-row: 1/-1;\r\n  border: none;\r\n  border-radius: 50px;\r\n  background-color: transparent;\r\n  outline: none;\r\n  cursor: pointer;\r\n  z-index: 2;\r\n\r\n  &:hover,\r\n  &.focus-visible {\r\n    background-color: ${rgba(\"white\", 0.05)};\r\n  }\r\n`\r\n","import classNames from \"classnames\"\r\nimport { rgba } from \"polished\"\r\nimport React from \"react\"\r\nimport { animated, config, useSpring } from \"react-spring\"\r\nimport styled from \"styled-components\"\r\nimport { Team } from \"../types\"\r\n\r\ninterface DiscProps {\r\n  x: number\r\n  y: number\r\n  team: Team\r\n}\r\n\r\nexport const Disc = (props: DiscProps) => {\r\n  const { x, y, team } = props\r\n\r\n  const style = useSpring({\r\n    to: { transform: \"translateY(0)\" },\r\n    from: { transform: `translateY(-${(y + 1) * 100}%)` },\r\n    config: {\r\n      ...config.gentle,\r\n      clamp: true\r\n    }\r\n  })\r\n\r\n  const className = classNames({\r\n    teamAi: team === \"ai\",\r\n    teamPlayer: team === \"player\"\r\n  })\r\n\r\n  return <Container x={x} y={y} className={className} style={style} />\r\n}\r\n\r\nconst Container = styled(animated.div)<Pick<DiscProps, \"x\" | \"y\">>`\r\n  grid-column: ${props => props.x + 1};\r\n  grid-row: ${props => props.y + 1};\r\n  width: 9vw;\r\n  height: 9vw;\r\n  min-width: 35px;\r\n  min-height: 35px;\r\n  max-width: 70px;\r\n  max-height: 70px;\r\n  border-radius: 50px;\r\n\r\n  background: radial-gradient(\r\n    circle,\r\n    ${rgba(\"black\", 0.3)},\r\n    ${rgba(\"black\", 0.3)} 40%,\r\n    var(--border-color) calc(40% + 1px),\r\n    var(--border-color) 48%,\r\n    ${rgba(\"black\", 0.3)} calc(48% + 1px)\r\n  );\r\n\r\n  &.teamAi {\r\n    --border-color: #c91a55;\r\n  }\r\n\r\n  &.teamPlayer {\r\n    --border-color: #268fc0;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { colors } from \"../styling/constants\"\r\n\r\ninterface SlotProps {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport const Slot = (props: SlotProps) => {\r\n  const { x, y } = props\r\n\r\n  return <Container x={x} y={y} />\r\n}\r\n\r\nconst Container = styled.div<Pick<SlotProps, \"x\" | \"y\">>`\r\n  grid-column: ${props => props.x + 1};\r\n  grid-row: ${props => props.y + 1};\r\n  width: 9vw;\r\n  height: 9vw;\r\n  min-width: 35px;\r\n  min-height: 35px;\r\n  max-width: 70px;\r\n  max-height: 70px;\r\n  background: radial-gradient(\r\n    circle,\r\n    transparent,\r\n    transparent calc(69% - var(--board-padding)),\r\n    ${colors.board} calc(69% - var(--board-padding) + 1px)\r\n  );\r\n  z-index: 1;\r\n`\r\n","export const rowLength = 7\r\nexport const columnLength = 6\r\n","export const wait = (milliseconds: number) =>\r\n  new Promise(resolve => setTimeout(resolve, milliseconds))\r\n","import { action, observable } from \"mobx\"\r\nimport { Team } from \"../types\"\r\n\r\nexport class SlotModel {\r\n  @observable\r\n  public filledBy: Team | \"none\" = \"none\"\r\n\r\n  constructor(public readonly x: number, public readonly y: number) {}\r\n\r\n  @action\r\n  public fill(team: Team) {\r\n    this.filledBy = team\r\n  }\r\n}\r\n","import { action, computed } from \"mobx\"\r\nimport { last, range } from \"ramda\"\r\nimport { columnLength } from \"../config\"\r\nimport { Team } from \"../types\"\r\nimport { SlotModel } from \"./SlotModel\"\r\n\r\nexport class ColumnModel {\r\n  constructor(public readonly x: number) {}\r\n  public readonly slots = range(0, columnLength).map(y => new SlotModel(this.x, y))\r\n\r\n  @computed\r\n  public get emptySlots() {\r\n    return this.slots.filter(slot => slot.filledBy === \"none\") as Array<\r\n      SlotModel & { filledBy: \"none\" }\r\n    >\r\n  }\r\n\r\n  @computed\r\n  public get filledSlots() {\r\n    return this.slots.filter(slot => slot.filledBy !== \"none\") as Array<\r\n      SlotModel & { filledBy: Team }\r\n    >\r\n  }\r\n\r\n  @computed\r\n  public get isFull() {\r\n    return this.slots.every(slot => slot.filledBy !== \"none\")\r\n  }\r\n\r\n  @action\r\n  public fill(team: Team) {\r\n    const emptySlot = last(this.emptySlots)\r\n    if (!emptySlot) return { success: false }\r\n\r\n    emptySlot.fill(team)\r\n    return { success: true }\r\n  }\r\n}\r\n","import { action, computed, observable } from \"mobx\"\r\nimport { range } from \"ramda\"\r\nimport { rowLength } from \"../config\"\r\nimport { sample } from \"../helpers/sample\"\r\nimport { wait } from \"../helpers/wait\"\r\nimport { ColumnModel } from \"../models/ColumnModel\"\r\nimport { GameState } from \"../types\"\r\n\r\nclass GameStore {\r\n  public readonly columns = range(0, rowLength).map(x => new ColumnModel(x))\r\n  public readonly slots = this.columns.flatMap(column => column.slots)\r\n\r\n  @observable\r\n  public state: GameState = \"ready\"\r\n\r\n  @computed\r\n  public get filledSlots() {\r\n    return this.columns.flatMap(column => column.filledSlots)\r\n  }\r\n\r\n  @action\r\n  public async fillColumn(column: ColumnModel) {\r\n    if (this.state !== \"ready\") return\r\n\r\n    const { success } = column.fill(\"player\")\r\n    if (!success) return\r\n\r\n    this.state = \"ai playing\"\r\n    await wait(1000)\r\n\r\n    let randomColumn: ColumnModel | undefined = undefined\r\n    do {\r\n      randomColumn = sample(this.columns)\r\n    } while (randomColumn.isFull)\r\n\r\n    randomColumn.fill(\"ai\")\r\n    this.state = \"ready\"\r\n  }\r\n}\r\n\r\nexport const gameStore = new GameStore()\r\n","export const sample = <T>(array: T[]) => array[Math.floor(Math.random() * array.length)]\r\n","import { useObserver } from \"mobx-react-lite\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { Column } from \"../components/Column\"\r\nimport { Disc } from \"../components/Disc\"\r\nimport { Slot } from \"../components/Slot\"\r\nimport { ColumnModel } from \"../models/ColumnModel\"\r\nimport { SlotModel } from \"../models/SlotModel\"\r\nimport { gameStore } from \"../stores/gameStore\"\r\nimport { breakpoints, colors } from \"../styling/constants\"\r\n\r\nconst generateDiscKey = (slot: SlotModel) => `disc-${slot.x}-${slot.y}`\r\nconst generateSlotKey = (slot: SlotModel) => `slot-${slot.x}-${slot.y}`\r\nconst generateColumnKey = (column: ColumnModel) => `column-${column.x}`\r\n\r\nexport const Board = () => {\r\n  const discs = useObserver(() =>\r\n    gameStore.filledSlots.map(slot => (\r\n      <Disc\r\n        key={generateDiscKey(slot)}\r\n        x={slot.x}\r\n        y={slot.y}\r\n        team={slot.filledBy}\r\n      />\r\n    ))\r\n  )\r\n\r\n  const slots = gameStore.slots.map(slot => (\r\n    <Slot key={generateSlotKey(slot)} x={slot.x} y={slot.y} />\r\n  ))\r\n\r\n  const columns = gameStore.columns.map(column => (\r\n    <Column\r\n      key={generateColumnKey(column)}\r\n      x={column.x}\r\n      onClick={() => gameStore.fillColumn(column)}\r\n    />\r\n  ))\r\n\r\n  return (\r\n    <Container>\r\n      {discs}\r\n      {slots}\r\n      {columns}\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.main`\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  grid-template-rows: repeat(6, 1fr);\r\n\r\n  padding: var(--board-padding);\r\n  background-image: linear-gradient(\r\n      to bottom,\r\n      ${colors.background} 0%,\r\n      ${colors.background} 100%\r\n    ),\r\n    linear-gradient(to bottom, ${colors.board} 0%, ${colors.board} 100%);\r\n  background-clip: content-box, padding-box;\r\n\r\n  border-radius: 4px;\r\n\r\n  @media ${breakpoints.mobile} {\r\n    --board-padding: 2px;\r\n  }\r\n\r\n  @media ${breakpoints.desktop} {\r\n    --board-padding: 5px;\r\n  }\r\n`\r\n","import { useObserver } from \"mobx-react-lite\"\r\nimport { rgba } from \"polished\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { gameStore } from \"../stores/gameStore\"\r\nimport { GameState } from \"../types\"\r\n\r\nconst stateTexts: Record<GameState, string> = {\r\n  ready: \"Your turn!\",\r\n  \"ai playing\": \"AI is playing...\",\r\n  \"ai won\": \"The AI won!\",\r\n  \"player won\": \"You won!\"\r\n}\r\n\r\nexport const GameInfo = () => {\r\n  const state = useObserver(() => gameStore.state)\r\n  const stateText = stateTexts[state]\r\n\r\n  return <Container>{stateText}</Container>\r\n}\r\n\r\nconst Container = styled.footer`\r\n  color: ${rgba(\"white\", 0.7)};\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n  text-align: center;\r\n  margin-top: 10px;\r\n`\r\n","import React from \"react\"\r\nimport styled, { createGlobalStyle } from \"styled-components\"\r\nimport { colors } from \"../styling/constants\"\r\nimport { Board } from \"./Board\"\r\nimport { GameInfo } from \"./GameInfo\"\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Container>\r\n        <Board />\r\n        <GameInfo />\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background-color: ${colors.background};\r\n`\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    font-family: \"Montserrat\", sans-serif;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { App } from \"./containers/App\"\r\nimport \"./polyfills\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n"],"sourceRoot":""}