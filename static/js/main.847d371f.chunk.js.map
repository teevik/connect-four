{"version":3,"sources":["styling/constants.ts","components/Column.tsx","components/Disc.tsx","components/Slot.tsx","helpers/wait.ts","config.ts","models/SlotModel.ts","models/ColumnModel.ts","stores/gameStore.ts","helpers/sample.ts","containers/Board.tsx","helpers/randomBetween.ts","containers/GameFooter.tsx","icons/RefreshIcon.tsx","containers/GameHeader.tsx","containers/App.tsx","index.tsx"],"names":["colors","background","board","disc","ai","player","breakpoints","Column","props","x","onClick","isReady","className","classNames","react_default","a","createElement","Container","styled","button","withConfig","displayName","componentId","rgba","Disc","y","team","style","useSpring","to","transform","from","concat","config","Object","objectSpread","gentle","clamp","teamAi","teamPlayer","Disc_Container","animated","div","Slot","Slot_Container","wait","milliseconds","Promise","resolve","setTimeout","columnLength","SlotModel","_class","classCallCheck","this","initializerDefineProperty","_descriptor","createClass","key","value","filledBy","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","action","getOwnPropertyDescriptor","ColumnModel","ColumnModel_class","_this","slots","range","map","emptySlot","last","emptySlots","fill","success","get","filter","slot","every","computed","checkLine","_len","arguments","length","Array","_key","firstSlot","wonState","gameStore","GameStore","gameStore_descriptor","_descriptor2","_descriptor3","_descriptor4","disposeWinListener","startGame","columns","flatMap","column","state","winner","undefined","autorun","result","rowLength","checkWinner","randomColumn","array","Math","floor","random","isFull","filledSlots","generateDiscKey","generateSlotKey","generateColumnKey","confettiConfig","particleCount","angle","min","max","spread","origin","createManyConfetti","_ref","asyncToGenerator","regenerator_default","mark","_callee","i","wrap","_context","prev","next","createConfetti","stop","_x","apply","Board","useEffect","useObserver","discs","Disc_Disc","Slot_Slot","Column_Column","fillColumn","Board_Container","main","stateTexts","ready","ai playing","ai won","player won","GameFooter","stateText","GameFooter_Container","footer","RefreshIcon","Wrapper","xmlns","viewBox","Path","d","svg","path","GameHeader","GameHeader_Container","IconButton","RefreshIcon_RefreshIcon","header","GlobalStyle","createGlobalStyle","_templateObject","ReactDOM","render","Fragment","App_Container","GameHeader_GameHeader","Board_Board","GameFooter_GameFooter","document","getElementById"],"mappings":"wMAAaA,EAAS,CACpBC,WAAY,UACZC,MAAO,UACPC,KAAM,UACNC,GAAI,UACJC,OAAQ,WAGGC,EACH,qBADGA,EAEF,4FCCEC,EAAS,SAACC,GAAuB,IACpCC,EAAwBD,EAAxBC,EAAGC,EAAqBF,EAArBE,QAASC,EAAYH,EAAZG,QAEdC,EAAYC,IAAW,CAAEF,YAE/B,OAAOG,EAAAC,EAAAC,cAACC,EAAD,CAAWL,UAAWA,EAAWH,EAAGA,EAAGC,QAASA,KAGnDO,EAAYC,IAAOC,OAAVC,WAAA,CAAAC,YAAA,oBAAAC,YAAA,YAAGJ,CAAH,iOACE,SAAAV,GAAK,OAAIA,EAAMC,EAAI,GAaZc,YAAK,QAAS,sBCpBzBC,EAAO,SAAChB,GAAqB,IAChCC,EAAeD,EAAfC,EAAGgB,EAAYjB,EAAZiB,EAAGC,EAASlB,EAATkB,KAERC,EAAQC,YAAU,CACtBC,GAAI,CAAEC,UAAW,iBACjBC,KAAM,CAAED,UAAS,eAAAE,OAA2B,KAATP,EAAI,GAAtB,OACjBQ,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFD,IAAOG,OADN,CAEJC,OAAO,MAILzB,EAAYC,IAAW,CAC3ByB,OAAiB,OAATZ,EACRa,WAAqB,WAATb,IAGd,OAAOZ,EAAAC,EAAAC,cAACwB,EAAD,CAAW/B,EAAGA,EAAGgB,EAAGA,EAAGb,UAAWA,EAAWe,MAAOA,KAGvDV,EAAYC,YAAOuB,IAASC,KAAnBtB,WAAA,CAAAC,YAAA,kBAAAC,YAAA,gBAAGJ,CAAH,uUACE,SAAAV,GAAK,OAAIA,EAAMC,EAAI,GACtB,SAAAD,GAAK,OAAIA,EAAMiB,EAAI,GAW3BzB,EAAOG,KACPH,EAAOG,KAGPH,EAAOG,KAISH,EAAOI,GAIPJ,EAAOK,QCjDhBsC,EAAO,SAACnC,GAAqB,IAChCC,EAASD,EAATC,EAAGgB,EAAMjB,EAANiB,EAEX,OAAOX,EAAAC,EAAAC,cAAC4B,EAAD,CAAWnC,EAAGA,EAAGgB,EAAGA,KAGvBR,EAAYC,IAAOwB,IAAVtB,WAAA,CAAAC,YAAA,kBAAAC,YAAA,gBAAGJ,CAAH,wQACE,SAAAV,GAAK,OAAIA,EAAMC,EAAI,GACtB,SAAAD,GAAK,OAAIA,EAAMiB,EAAI,GAW3BzB,EAAOE,OC5BA2C,EAAO,SAACC,GAAD,OAClB,IAAIC,QAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,kDCAhCI,EAAe,UCEfC,GAAbC,EAAA,WAIE,SAAAD,EAA4B1C,EAA2BgB,GAAYS,OAAAmB,EAAA,EAAAnB,CAAAoB,KAAAH,GAAAG,KAAA7C,IAAA6C,KAAA7B,IAAAS,OAAAqB,EAAA,EAAArB,CAAAoB,KAAA,WAAAE,EAAAF,MAJrE,OAAApB,OAAAuB,EAAA,EAAAvB,CAAAiB,EAAA,EAAAO,IAAA,OAAAC,MAAA,SAOcjC,GACV4B,KAAKM,SAAWlC,MARpByB,EAAA,GAAAK,EAAAtB,OAAA2B,EAAA,EAAA3B,CAAAkB,EAAAU,UAAA,YACGC,KADH,CAAAC,cAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,YAAA,iBAEmC,UAFnCjC,OAAA2B,EAAA,EAAA3B,CAAAkB,EAAAU,UAAA,QAMGM,KANHlC,OAAAmC,yBAAAjB,EAAAU,UAAA,QAAAV,EAAAU,WAAAV,GCGakB,GAAbC,EAAA,WACE,SAAAD,EAA4B7D,GAAW,IAAA+D,EAAAlB,KAAApB,OAAAmB,EAAA,EAAAnB,CAAAoB,KAAAgB,GAAAhB,KAAA7C,IAAA6C,KACvBmB,MAAQC,YAAM,EAAGxB,GAAcyB,IAAI,SAAAlD,GAAC,OAAI,IAAI0B,EAAUqB,EAAK/D,EAAGgB,KAFhF,OAAAS,OAAAuB,EAAA,EAAAvB,CAAAoC,EAAA,EAAAZ,IAAA,OAAAC,MAAA,SAwBcjC,GACV,IAAMkD,EAAYC,YAAKvB,KAAKwB,YAC5B,OAAKF,GAELA,EAAUG,KAAKrD,GACR,CAAEsD,SAAS,IAHK,CAAEA,SAAS,KA1BtC,CAAAtB,IAAA,aAAAuB,IAAA,WAMI,OAAO3B,KAAKmB,MAAMS,OAAO,SAAAC,GAAI,MAAsB,SAAlBA,EAAKvB,aAN1C,CAAAF,IAAA,cAAAuB,IAAA,WAaI,OAAO3B,KAAKmB,MAAMS,OAAO,SAAAC,GAAI,MAAsB,SAAlBA,EAAKvB,aAb1C,CAAAF,IAAA,SAAAuB,IAAA,WAoBI,OAAO3B,KAAKmB,MAAMW,MAAM,SAAAD,GAAI,MAAsB,SAAlBA,EAAKvB,eApBzCU,EAAA,GAAApC,OAAA2B,EAAA,EAAA3B,CAAAqC,EAAAT,UAAA,cAIGuB,KAJHnD,OAAAmC,yBAAAE,EAAAT,UAAA,cAAAS,EAAAT,WAAA5B,OAAA2B,EAAA,EAAA3B,CAAAqC,EAAAT,UAAA,eAWGuB,KAXHnD,OAAAmC,yBAAAE,EAAAT,UAAA,eAAAS,EAAAT,WAAA5B,OAAA2B,EAAA,EAAA3B,CAAAqC,EAAAT,UAAA,UAkBGuB,KAlBHnD,OAAAmC,yBAAAE,EAAAT,UAAA,UAAAS,EAAAT,WAAA5B,OAAA2B,EAAA,EAAA3B,CAAAqC,EAAAT,UAAA,QAuBGM,KAvBHlC,OAAAmC,yBAAAE,EAAAT,UAAA,QAAAS,EAAAT,WAAAS,GCGMe,EAAY,WAA4D,QAAAC,EAAAC,UAAAC,OAAxDhB,EAAwD,IAAAiB,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAxDlB,EAAwDkB,GAAAH,UAAAG,GAC5E,IAAMC,EAAYnB,EAAM,GACxB,GAA2B,SAAvBmB,EAAUhC,SAEd,OAAIa,EAAMW,MAAM,SAAAD,GAAI,OAAIA,EAAKvB,WAAagC,EAAUhC,WAC3CgC,EAAUhC,cADnB,GAIIiC,EAAW,CACfzF,GAAI,SACJC,OAAQ,cAyIGyF,EAAY,iBAzHvB,SAAAC,IAAe7D,OAAAmB,EAAA,EAAAnB,CAAAoB,KAAAyC,GAAA7D,OAAAqB,EAAA,EAAArB,CAAAoB,KAAA,UAAA0C,EAAA1C,MAAApB,OAAAqB,EAAA,EAAArB,CAAAoB,KAAA,QAAA2C,EAAA3C,MAAApB,OAAAqB,EAAA,EAAArB,CAAAoB,KAAA,QAAA4C,EAAA5C,MAAApB,OAAAqB,EAAA,EAAArB,CAAAoB,KAAA,SAAA6C,EAAA7C,WAIP8C,wBAJM,EACZ9C,KAAK+C,oEAKY,IAAA7B,EAAAlB,KACjBA,KAAKgD,QAAU5B,YAAM,EH1CA,GG0CcC,IAAI,SAAAlE,GAAC,OAAI,IAAI6D,EAAY7D,KAC5D6C,KAAKmB,MAAQnB,KAAKgD,QAAQC,QAAQ,SAAAC,GAAM,OAAIA,EAAO/B,QACnDnB,KAAKmD,MAAQ,QACbnD,KAAKoD,YAASC,EAEVrD,KAAK8C,oBAAoB9C,KAAK8C,qBAElC9C,KAAK8C,mBAAqBQ,YAAQ,WAAM,IAC9BF,EAAWlC,EAAXkC,OAEJA,IACFlC,EAAKkC,OAASA,EACdlC,EAAKiC,MAAQZ,EAASa,GAClBlC,EAAK4B,oBAAoB5B,EAAK4B,8DAiBtC,IAPoB,IACZE,EAAYhD,KAAZgD,QACFnB,EAAO,SAAC1E,EAAWgB,GAAZ,OAA0B6E,EAAQ7F,GAAGgE,MAAMhD,IAEpDiF,OAA2BC,EAGtBlG,EAAI,EAAGA,EHxEK,EGwEUA,IAC7B,IAAK,IAAIgB,EAAI,EAAGA,EAAIyB,EAAe,EAAGzB,IAAK,CACzC,IAAMoF,EAASvB,EACbH,EAAK1E,EAAGgB,GACR0D,EAAK1E,EAAGgB,EAAI,GACZ0D,EAAK1E,EAAGgB,EAAI,GACZ0D,EAAK1E,EAAGgB,EAAI,IAGVoF,IAAQH,EAASG,GAKzB,IAAK,IAAIpG,EAAI,EAAGA,EAAIqG,EAAerG,IACjC,IAAK,IAAIgB,EAAI,EAAGA,EAAIyB,EAAczB,IAAK,CACrC,IAAMoF,EAASvB,EACbH,EAAK1E,EAAGgB,GACR0D,EAAK1E,EAAI,EAAGgB,GACZ0D,EAAK1E,EAAI,EAAGgB,GACZ0D,EAAK1E,EAAI,EAAGgB,IAGVoF,IAAQH,EAASG,GAKzB,IAAK,IAAIpG,EAAI,EAAGA,EAAIqG,EAAerG,IACjC,IAAK,IAAIgB,EAAI,EAAGA,EAAIyB,EAAe,EAAGzB,IAAK,CACzC,IAAMoF,EAASvB,EACbH,EAAK1E,EAAGgB,GACR0D,EAAK1E,EAAI,EAAGgB,EAAI,GAChB0D,EAAK1E,EAAI,EAAGgB,EAAI,GAChB0D,EAAK1E,EAAI,EAAGgB,EAAI,IAGdoF,IAAQH,EAASG,GAKzB,IAAK,IAAIpG,EAAI,EAAGA,EAAIqG,EAAerG,IACjC,IAAK,IAAIgB,EAAI,EAAGA,EAAIyB,EAAczB,IAAK,CACrC,IAAMoF,EAASvB,EACbH,EAAK1E,EAAGgB,GACR0D,EAAK1E,EAAI,EAAGgB,EAAI,GAChB0D,EAAK1E,EAAI,EAAGgB,EAAI,GAChB0D,EAAK1E,EAAI,EAAGgB,EAAI,IAGdoF,IAAQH,EAASG,GAKzB,OADIH,IAAQpD,KAAKoD,OAASA,GACnBA,6EAIeF,8EACH,UAAflD,KAAKmD,4DAEWD,EAAOzB,KAAK,YAAxBC,6DAEK1B,KAAKyD,sEAGlBzD,KAAKmD,MAAQ,uBACP5D,EAAK,aAEPmE,OAAwCL,EAC5C,GChJsBM,EDiJE3D,KAAKgD,QAA3BU,ECjJmCC,EAAMC,KAAKC,MAAMD,KAAKE,SAAWH,EAAMxB,eDkJnEuB,EAAaK,WAEtBL,EAAajC,KAAK,OAETzB,KAAKyD,iEAEdzD,KAAKmD,MAAQ,0CCxJK,IAAIQ,uGD8DtB,OAAO3D,KAAKgD,QAAQC,QAAQ,SAAAC,GAAM,OAAIA,EAAOc,4DAvC9CvD,sGAGAA,sGAGAA,uGAGAA,0GA4BAsB,mHAuEAjB,+EEnHGmD,EAAkB,SAACpC,GAAD,cAAAnD,OAA6BmD,EAAK1E,EAAlC,KAAAuB,OAAuCmD,EAAK1D,IAC9D+F,EAAkB,SAACrC,GAAD,cAAAnD,OAA6BmD,EAAK1E,EAAlC,KAAAuB,OAAuCmD,EAAK1D,IAC9DgG,EAAoB,SAACjB,GAAD,gBAAAxE,OAAmCwE,EAAO/F,IAE9DiH,EAAiB,SAAChB,GAAD,MAAmB,CACxCiB,cAAe,IACfC,OCtB4BC,EDsBP,GCtBoBC,EDsBhB,ICrBzBZ,KAAKE,UAAYU,EAAMD,GAAOA,GDsB9BE,OAAQ,IACRC,OAAQ,CACNvG,EAAG,IAELzB,OAAQ,CAACA,EAAO0G,GAAU1G,EAAOG,OC3BN,IAAC0H,EAAaC,GD8BrCG,GAAkB,eAAAC,EAAAhG,OAAAiG,EAAA,EAAAjG,CAAAkG,EAAArH,EAAAsH,KAAG,SAAAC,EAAO5B,GAAP,IAAA6B,EAAA,OAAAH,EAAArH,EAAAyH,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAChBJ,EAAI,EADY,YACTA,EAAI,GADK,CAAAE,EAAAE,KAAA,eAEvBC,YAAelB,EAAehB,IAFP+B,EAAAE,KAAA,EAGjB9F,EAAK,KAHY,OACF0F,IADEE,EAAAE,KAAA,gCAAAF,EAAAI,SAAAP,MAAH,gBAAAQ,GAAA,OAAAZ,EAAAa,MAAAzF,KAAAkC,YAAA,GAkBXwD,GAAQ,WAVnBC,oBAAU,WAMR,OALiBrC,YAAQ,WAAM,IACrBF,EAAWZ,EAAXY,OACJA,GAAQuB,GAAmBvB,MAIhC,IAMH,IAAM/F,EAAUuI,YAAY,iBAA0B,UAApBpD,EAAUW,QAEtC0C,EAAQD,YAAY,kBACxBpD,EAAUwB,YAAY3C,IAAI,SAAAQ,GAAI,OAC5BrE,EAAAC,EAAAC,cAACoI,EAAD,CACE1F,IAAK6D,EAAgBpC,GACrB1E,EAAG0E,EAAK1E,EACRgB,EAAG0D,EAAK1D,EACRC,KAAMyD,EAAKvB,eAKXa,EAAQqB,EAAUrB,MAAME,IAAI,SAAAQ,GAAI,OACpCrE,EAAAC,EAAAC,cAACqI,EAAD,CAAM3F,IAAK8D,EAAgBrC,GAAO1E,EAAG0E,EAAK1E,EAAGgB,EAAG0D,EAAK1D,MAGjD6E,EAAUR,EAAUQ,QAAQ3B,IAAI,SAAA6B,GAAM,OAC1C1F,EAAAC,EAAAC,cAACsI,EAAD,CACE5F,IAAK+D,EAAkBjB,GACvB/F,EAAG+F,EAAO/F,EACVC,QAAS,kBAAMoF,EAAUyD,WAAW/C,IACpC7F,QAASA,MAIb,OACEG,EAAAC,EAAAC,cAACwI,GAAD,KACGL,EACA1E,EACA6B,IAKDrF,GAAYC,IAAOuI,KAAVrI,WAAA,CAAAC,YAAA,mBAAAC,YAAA,YAAGJ,CAAH,uVAQPlB,EAAOC,WACPD,EAAOC,WAEkBD,EAAOE,MAAaF,EAAOE,MAKjDI,EAIAA,GEnGLoJ,GAAwC,CAC5CC,MAAO,aACPC,aAAc,mBACdC,SAAU,cACVC,aAAc,YAGHC,GAAa,WACxB,IAAMtD,EAAQyC,YAAY,kBAAMpD,EAAUW,QACpCuD,EAAYN,GAAWjD,GAE7B,OAAO3F,EAAAC,EAAAC,cAACiJ,GAAD,KAAYD,IAGf/I,GAAYC,IAAOgJ,OAAV9I,WAAA,CAAAC,YAAA,wBAAAC,YAAA,YAAGJ,CAAH,gFAKJK,YAAK,QAAS,KCvBZ4I,GAAc,WACzB,OACErJ,EAAAC,EAAAC,cAACoJ,GAAD,CAASC,MAAM,6BAA6BC,QAAQ,qBAClDxJ,EAAAC,EAAAC,cAAA,KAAGc,UAAU,sBACXhB,EAAAC,EAAAC,cAACuJ,GAAD,CAAMC,EAAE,mBAAmB1I,UAAU,uBACrChB,EAAAC,EAAAC,cAACuJ,GAAD,CAAMC,EAAE,uBAAuB1I,UAAU,2BACzChB,EAAAC,EAAAC,cAACuJ,GAAD,CAAMC,EAAE,yHAMVJ,GAAUlJ,IAAOuJ,IAAVrJ,WAAA,CAAAC,YAAA,uBAAAC,YAAA,YAAGJ,CAAH,2DAOPqJ,GAAOrJ,IAAOwJ,KAAVtJ,WAAA,CAAAC,YAAA,oBAAAC,YAAA,YAAGJ,CAAH,gGChBGyJ,GAAa,WACxB,OACE7J,EAAAC,EAAAC,cAAC4J,GAAD,KACE9J,EAAAC,EAAAC,cAAC6J,GAAD,CAAYnK,QAAS,kBAAMoF,EAAUO,cACnCvF,EAAAC,EAAAC,cAAC8J,GAAD,SAMF7J,GAAYC,IAAO6J,OAAV3J,WAAA,CAAAC,YAAA,wBAAAC,YAAA,gBAAGJ,CAAH,+DAMT2J,GAAa3J,IAAOC,OAAVC,WAAA,CAAAC,YAAA,yBAAAC,YAAA,gBAAGJ,CAAH,wGAGLK,YAAK,QAAS,IAKZA,YAAK,QAAS,kSCvBpB,IAaDN,GAAYC,IAAOwB,IAAVtB,WAAA,CAAAC,YAAA,iBAAAC,YAAA,eAAGJ,CAAH,yJAOOlB,EAAOC,YAGvB+K,GAAcC,YAAHC,YCzBjBC,IAASC,OAAOtK,EAAAC,EAAAC,cDEG,WACjB,OACEF,EAAAC,EAAAC,cAAAF,EAAAC,EAAAsK,SAAA,KACEvK,EAAAC,EAAAC,cAACgK,GAAD,MACAlK,EAAAC,EAAAC,cAACsK,GAAD,KACExK,EAAAC,EAAAC,cAACuK,GAAD,MACAzK,EAAAC,EAAAC,cAACwK,GAAD,MACA1K,EAAAC,EAAAC,cAACyK,GAAD,SCTQ,MAASC,SAASC,eAAe","file":"static/js/main.847d371f.chunk.js","sourcesContent":["export const colors = {\r\n  background: \"#212c2d\",\r\n  board: \"#334446\",\r\n  disc: \"#141d1f\",\r\n  ai: \"#c91a55\",\r\n  player: \"#268fc0\"\r\n}\r\n\r\nexport const breakpoints = {\r\n  mobile: \"(max-width: 600px)\",\r\n  desktop: \"(min-width: 601px)\"\r\n}\r\n","import classNames from \"classnames\"\r\nimport { rgba } from \"polished\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\ninterface ColumnProps {\r\n  x: number\r\n  onClick: () => void\r\n  isReady: boolean\r\n}\r\n\r\nexport const Column = (props: ColumnProps) => {\r\n  const { x, onClick, isReady } = props\r\n\r\n  const className = classNames({ isReady })\r\n\r\n  return <Container className={className} x={x} onClick={onClick} />\r\n}\r\n\r\nconst Container = styled.button<Pick<ColumnProps, \"x\">>`\r\n  grid-column: ${props => props.x + 1};\r\n  grid-row: 1/-1;\r\n  border: none;\r\n  border-radius: 50px;\r\n  background-color: transparent;\r\n  outline: none;\r\n  cursor: pointer;\r\n  z-index: 2;\r\n\r\n  transition: background-color 0.1s ease;\r\n\r\n  &.isReady:hover,\r\n  &.focus-visible {\r\n    background-color: ${rgba(\"white\", 0.05)};\r\n  }\r\n`\r\n","import classNames from \"classnames\"\r\nimport React from \"react\"\r\nimport { animated, config, useSpring } from \"react-spring\"\r\nimport styled from \"styled-components\"\r\nimport { colors } from \"../styling/constants\"\r\nimport { Team } from \"../types\"\r\n\r\ninterface DiscProps {\r\n  x: number\r\n  y: number\r\n  team: Team\r\n}\r\n\r\nexport const Disc = (props: DiscProps) => {\r\n  const { x, y, team } = props\r\n\r\n  const style = useSpring({\r\n    to: { transform: \"translateY(0)\" },\r\n    from: { transform: `translateY(-${(y + 1) * 100}%)` },\r\n    config: {\r\n      ...config.gentle,\r\n      clamp: true\r\n    }\r\n  })\r\n\r\n  const className = classNames({\r\n    teamAi: team === \"ai\",\r\n    teamPlayer: team === \"player\"\r\n  })\r\n\r\n  return <Container x={x} y={y} className={className} style={style} />\r\n}\r\n\r\nconst Container = styled(animated.div)<Pick<DiscProps, \"x\" | \"y\">>`\r\n  grid-column: ${props => props.x + 1};\r\n  grid-row: ${props => props.y + 1};\r\n  width: 9vw;\r\n  height: 9vw;\r\n  min-width: 35px;\r\n  min-height: 35px;\r\n  max-width: 70px;\r\n  max-height: 70px;\r\n  border-radius: 50px;\r\n\r\n  background: radial-gradient(\r\n    circle,\r\n    ${colors.disc},\r\n    ${colors.disc} 40%,\r\n    var(--border-color) calc(40% + 1px),\r\n    var(--border-color) 48%,\r\n    ${colors.disc} calc(48% + 1px)\r\n  );\r\n\r\n  &.teamAi {\r\n    --border-color: ${colors.ai};\r\n  }\r\n\r\n  &.teamPlayer {\r\n    --border-color: ${colors.player};\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { colors } from \"../styling/constants\"\r\n\r\ninterface SlotProps {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport const Slot = (props: SlotProps) => {\r\n  const { x, y } = props\r\n\r\n  return <Container x={x} y={y} />\r\n}\r\n\r\nconst Container = styled.div<Pick<SlotProps, \"x\" | \"y\">>`\r\n  grid-column: ${props => props.x + 1};\r\n  grid-row: ${props => props.y + 1};\r\n  width: 9vw;\r\n  height: 9vw;\r\n  min-width: 35px;\r\n  min-height: 35px;\r\n  max-width: 70px;\r\n  max-height: 70px;\r\n  background: radial-gradient(\r\n    circle,\r\n    transparent,\r\n    transparent calc(69% - var(--board-padding)),\r\n    ${colors.board} calc(69% - var(--board-padding) + 1px)\r\n  );\r\n  z-index: 1;\r\n`\r\n","export const wait = (milliseconds: number) =>\r\n  new Promise(resolve => setTimeout(resolve, milliseconds))\r\n","export const rowLength = 7\r\nexport const columnLength = 6\r\n","import { action, observable } from \"mobx\"\r\nimport { Team } from \"../types\"\r\n\r\nexport class SlotModel {\r\n  @observable\r\n  public filledBy: Team | \"none\" = \"none\"\r\n\r\n  constructor(public readonly x: number, public readonly y: number) {}\r\n\r\n  @action\r\n  public fill(team: Team) {\r\n    this.filledBy = team\r\n  }\r\n}\r\n","import { action, computed } from \"mobx\"\r\nimport { last, range } from \"ramda\"\r\nimport { columnLength } from \"../config\"\r\nimport { Team } from \"../types\"\r\nimport { SlotModel } from \"./SlotModel\"\r\n\r\nexport class ColumnModel {\r\n  constructor(public readonly x: number) {}\r\n  public readonly slots = range(0, columnLength).map(y => new SlotModel(this.x, y))\r\n\r\n  @computed\r\n  public get emptySlots() {\r\n    return this.slots.filter(slot => slot.filledBy === \"none\") as Array<\r\n      SlotModel & { filledBy: \"none\" }\r\n    >\r\n  }\r\n\r\n  @computed\r\n  public get filledSlots() {\r\n    return this.slots.filter(slot => slot.filledBy !== \"none\") as Array<\r\n      SlotModel & { filledBy: Team }\r\n    >\r\n  }\r\n\r\n  @computed\r\n  public get isFull() {\r\n    return this.slots.every(slot => slot.filledBy !== \"none\")\r\n  }\r\n\r\n  @action\r\n  public fill(team: Team) {\r\n    const emptySlot = last(this.emptySlots)\r\n    if (!emptySlot) return { success: false }\r\n\r\n    emptySlot.fill(team)\r\n    return { success: true }\r\n  }\r\n}\r\n","import { action, autorun, computed, IReactionDisposer, observable } from \"mobx\"\r\nimport { range } from \"ramda\"\r\nimport { columnLength, rowLength } from \"../config\"\r\nimport { sample } from \"../helpers/sample\"\r\nimport { wait } from \"../helpers/wait\"\r\nimport { ColumnModel } from \"../models/ColumnModel\"\r\nimport { SlotModel } from \"../models/SlotModel\"\r\nimport { GameState, Team } from \"../types\"\r\n\r\nconst checkLine = (...slots: [SlotModel, SlotModel, SlotModel, SlotModel]) => {\r\n  const firstSlot = slots[0]\r\n  if (firstSlot.filledBy === \"none\") return\r\n\r\n  if (slots.every(slot => slot.filledBy === firstSlot.filledBy))\r\n    return firstSlot.filledBy\r\n}\r\n\r\nconst wonState = {\r\n  ai: \"ai won\" as const,\r\n  player: \"player won\" as const\r\n}\r\n\r\nclass GameStore {\r\n  @observable\r\n  public columns!: ColumnModel[]\r\n\r\n  @observable\r\n  public slots!: SlotModel[]\r\n\r\n  @observable\r\n  public state!: GameState\r\n\r\n  @observable\r\n  public winner?: Team\r\n\r\n  constructor() {\r\n    this.startGame()\r\n  }\r\n\r\n  private disposeWinListener?: IReactionDisposer\r\n\r\n  public startGame() {\r\n    this.columns = range(0, rowLength).map(x => new ColumnModel(x))\r\n    this.slots = this.columns.flatMap(column => column.slots)\r\n    this.state = \"ready\"\r\n    this.winner = undefined\r\n\r\n    if (this.disposeWinListener) this.disposeWinListener()\r\n\r\n    this.disposeWinListener = autorun(() => {\r\n      const { winner } = this\r\n\r\n      if (winner) {\r\n        this.winner = winner\r\n        this.state = wonState[winner]\r\n        if (this.disposeWinListener) this.disposeWinListener()\r\n      }\r\n    })\r\n  }\r\n\r\n  @computed\r\n  public get filledSlots() {\r\n    return this.columns.flatMap(column => column.filledSlots)\r\n  }\r\n\r\n  private checkWinner() {\r\n    const { columns } = this\r\n    const slot = (x: number, y: number) => columns[x].slots[y]\r\n\r\n    let winner: Team | undefined = undefined\r\n\r\n    // down\r\n    for (let x = 0; x < rowLength; x++) {\r\n      for (let y = 0; y < columnLength - 3; y++) {\r\n        const result = checkLine(\r\n          slot(x, y),\r\n          slot(x, y + 1),\r\n          slot(x, y + 2),\r\n          slot(x, y + 3)\r\n        )\r\n\r\n        if (result) winner = result\r\n      }\r\n    }\r\n\r\n    // right\r\n    for (let x = 0; x < rowLength - 3; x++) {\r\n      for (let y = 0; y < columnLength; y++) {\r\n        const result = checkLine(\r\n          slot(x, y),\r\n          slot(x + 1, y),\r\n          slot(x + 2, y),\r\n          slot(x + 3, y)\r\n        )\r\n\r\n        if (result) winner = result\r\n      }\r\n    }\r\n\r\n    // down-right\r\n    for (let x = 0; x < rowLength - 3; x++) {\r\n      for (let y = 0; y < columnLength - 3; y++) {\r\n        const result = checkLine(\r\n          slot(x, y),\r\n          slot(x + 1, y + 1),\r\n          slot(x + 2, y + 2),\r\n          slot(x + 3, y + 3)\r\n        )\r\n\r\n        if (result) winner = result\r\n      }\r\n    }\r\n\r\n    // down-left\r\n    for (let x = 0; x < rowLength - 3; x++) {\r\n      for (let y = 3; y < columnLength; y++) {\r\n        const result = checkLine(\r\n          slot(x, y),\r\n          slot(x + 1, y - 1),\r\n          slot(x + 2, y - 2),\r\n          slot(x + 3, y - 3)\r\n        )\r\n\r\n        if (result) winner = result\r\n      }\r\n    }\r\n\r\n    if (winner) this.winner = winner\r\n    return winner\r\n  }\r\n\r\n  @action\r\n  public async fillColumn(column: ColumnModel) {\r\n    if (this.state !== \"ready\") return\r\n\r\n    const { success } = column.fill(\"player\")\r\n    if (!success) return\r\n    let winner = this.checkWinner()\r\n    if (winner) return\r\n\r\n    this.state = \"ai playing\"\r\n    await wait(1000)\r\n\r\n    let randomColumn: ColumnModel | undefined = undefined\r\n    do {\r\n      randomColumn = sample(this.columns)\r\n    } while (randomColumn.isFull)\r\n\r\n    randomColumn.fill(\"ai\")\r\n\r\n    winner = this.checkWinner()\r\n    if (winner) return\r\n    this.state = \"ready\"\r\n  }\r\n}\r\n\r\nexport const gameStore = new GameStore()\r\n","export const sample = <T>(array: T[]) => array[Math.floor(Math.random() * array.length)]\r\n","import createConfetti from \"canvas-confetti\"\r\nimport { autorun } from \"mobx\"\r\nimport { useObserver } from \"mobx-react-lite\"\r\nimport React, { useEffect } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { Column } from \"../components/Column\"\r\nimport { Disc } from \"../components/Disc\"\r\nimport { Slot } from \"../components/Slot\"\r\nimport { randomBetween } from \"../helpers/randomBetween\"\r\nimport { wait } from \"../helpers/wait\"\r\nimport { ColumnModel } from \"../models/ColumnModel\"\r\nimport { SlotModel } from \"../models/SlotModel\"\r\nimport { gameStore } from \"../stores/gameStore\"\r\nimport { breakpoints, colors } from \"../styling/constants\"\r\nimport { Team } from \"../types\"\r\n\r\nconst generateDiscKey = (slot: SlotModel) => `disc-${slot.x}-${slot.y}`\r\nconst generateSlotKey = (slot: SlotModel) => `slot-${slot.x}-${slot.y}`\r\nconst generateColumnKey = (column: ColumnModel) => `column-${column.x}`\r\n\r\nconst confettiConfig = (winner: Team) => ({\r\n  particleCount: 200,\r\n  angle: randomBetween(55, 125),\r\n  spread: 100,\r\n  origin: {\r\n    y: 0.6\r\n  },\r\n  colors: [colors[winner!], colors.disc]\r\n})\r\n\r\nconst createManyConfetti = async (winner: Team) => {\r\n  for (var i = 0; i < 3; i++) {\r\n    createConfetti(confettiConfig(winner!))\r\n    await wait(500)\r\n  }\r\n}\r\n\r\nconst useVictoryConfetti = () => {\r\n  useEffect(() => {\r\n    const disposer = autorun(() => {\r\n      const { winner } = gameStore\r\n      if (winner) createManyConfetti(winner)\r\n    })\r\n\r\n    return disposer\r\n  }, [])\r\n}\r\n\r\nexport const Board = () => {\r\n  useVictoryConfetti()\r\n\r\n  const isReady = useObserver(() => gameStore.state === \"ready\")\r\n\r\n  const discs = useObserver(() =>\r\n    gameStore.filledSlots.map(slot => (\r\n      <Disc\r\n        key={generateDiscKey(slot)}\r\n        x={slot.x}\r\n        y={slot.y}\r\n        team={slot.filledBy}\r\n      />\r\n    ))\r\n  )\r\n\r\n  const slots = gameStore.slots.map(slot => (\r\n    <Slot key={generateSlotKey(slot)} x={slot.x} y={slot.y} />\r\n  ))\r\n\r\n  const columns = gameStore.columns.map(column => (\r\n    <Column\r\n      key={generateColumnKey(column)}\r\n      x={column.x}\r\n      onClick={() => gameStore.fillColumn(column)}\r\n      isReady={isReady}\r\n    />\r\n  ))\r\n\r\n  return (\r\n    <Container>\r\n      {discs}\r\n      {slots}\r\n      {columns}\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.main`\r\n  display: grid;\r\n  grid-template-columns: repeat(7, 1fr);\r\n  grid-template-rows: repeat(6, 1fr);\r\n\r\n  padding: var(--board-padding);\r\n  background-image: linear-gradient(\r\n      to bottom,\r\n      ${colors.background} 0%,\r\n      ${colors.background} 100%\r\n    ),\r\n    linear-gradient(to bottom, ${colors.board} 0%, ${colors.board} 100%);\r\n  background-clip: content-box, padding-box;\r\n\r\n  border-radius: 4px;\r\n\r\n  @media ${breakpoints.mobile} {\r\n    --board-padding: 2px;\r\n  }\r\n\r\n  @media ${breakpoints.desktop} {\r\n    --board-padding: 5px;\r\n  }\r\n`\r\n","export const randomBetween = (min: number, max: number) =>\r\n  Math.random() * (max - min) + min\r\n","import { useObserver } from \"mobx-react-lite\"\r\nimport { rgba } from \"polished\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { gameStore } from \"../stores/gameStore\"\r\nimport { GameState } from \"../types\"\r\n\r\nconst stateTexts: Record<GameState, string> = {\r\n  ready: \"Your turn!\",\r\n  \"ai playing\": \"AI is playing...\",\r\n  \"ai won\": \"The AI won!\",\r\n  \"player won\": \"You won!\"\r\n}\r\n\r\nexport const GameFooter = () => {\r\n  const state = useObserver(() => gameStore.state)\r\n  const stateText = stateTexts[state]\r\n\r\n  return <Container>{stateText}</Container>\r\n}\r\n\r\nconst Container = styled.footer`\r\n  margin-top: 10px;\r\n  font-size: 24px;\r\n  font-weight: 500;\r\n  text-align: center;\r\n  color: ${rgba(\"white\", 0.7)};\r\n`\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nexport const RefreshIcon = () => {\r\n  return (\r\n    <Wrapper xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 29.829 29.828\">\r\n      <g transform=\"translate(0 -1.94)\">\r\n        <Path d=\"M1,4v9.022h9.022\" transform=\"translate(0 0.503)\" />\r\n        <Path d=\"M26.022,23.022V14H17\" transform=\"translate(8.058 5.539)\" />\r\n        <Path d=\"M30.305,12.021A13.532,13.532,0,0,0,7.977,6.968L1,13.524m33.079,6.014L27.1,26.094A13.532,13.532,0,0,1,4.774,21.042\" />\r\n      </g>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nconst Wrapper = styled.svg`\r\n  opacity: 0.83;\r\n  height: 27px;\r\n  width: 37px;\r\n  margin-left: -5px;\r\n`\r\n\r\nconst Path = styled.path`\r\n  fill: none;\r\n  stroke: currentColor;\r\n  stroke-linecap: round;\r\n  stroke-linejoin: round;\r\n  stroke-width: 2px;\r\n`\r\n","import { rgba } from \"polished\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { RefreshIcon } from \"../icons/RefreshIcon\"\r\nimport { gameStore } from \"../stores/gameStore\"\r\n\r\nexport const GameHeader = () => {\r\n  return (\r\n    <Container>\r\n      <IconButton onClick={() => gameStore.startGame()}>\r\n        <RefreshIcon />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst Container = styled.header`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 10px;\r\n`\r\n\r\nconst IconButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n  color: ${rgba(\"white\", 0.7)};\r\n  cursor: pointer;\r\n  transition: color 0.2s ease;\r\n\r\n  &:hover {\r\n    color: ${rgba(\"white\", 0.9)};\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport styled, { createGlobalStyle } from \"styled-components\"\r\nimport { colors } from \"../styling/constants\"\r\nimport { Board } from \"./Board\"\r\nimport { GameFooter } from \"./GameFooter\"\r\nimport { GameHeader } from \"./GameHeader\"\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Container>\r\n        <GameHeader />\r\n        <Board />\r\n        <GameFooter />\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: min-content;\r\n  justify-content: center;\r\n  align-items: center;\r\n  align-content: center;\r\n  min-height: 100vh;\r\n  background-color: ${colors.background};\r\n`\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    margin: 0;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  .js-focus-visible :focus:not(.focus-visible) {\r\n    outline: none;\r\n  }\r\n\r\n  body {\r\n    font-family: \"Montserrat\", sans-serif;\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { App } from \"./containers/App\"\r\nimport \"./polyfills\"\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"))\r\n"],"sourceRoot":""}